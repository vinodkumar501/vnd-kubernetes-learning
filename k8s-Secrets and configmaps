mongo-express:

mongo-express is a web-based MongoDB admin interface written in Node. js, Express. js, and Bootstrap3.

https://www.bogotobogo.com/DevOps/Docker/Docker_Kubernetes_MongoDB_MongoExpress.php


what is mongodb?

https://hub.docker.com/_/mongo


MongoDB is a free and open-source cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schemata. 
MongoDB is developed by MongoDB Inc., and is published under a combination of the Server Side Public License and the Apache License.

The MongoDB server in the image listens on the standard MongoDB port, 27017, so connecting via Docker networks will be the same as connecting to a remote mongod.
The following example starts another MongoDB container instance and runs the mongo command line client against the original MongoDB container from the example above,
allowing you to execute MongoDB statements against your database instance:

Environment Variables?

When you start the mongo image, you can adjust the initialization of the MongoDB instance by passing one or more environment variables on the docker run command line. 
Do note that none of the variables below will have any effect if you start the container with a data directory that already contains a database: any pre-existing database 
will always be left untouched on container startup.

-> MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD

-> MONGO_INITDB_DATABASE
This variable allows you to specify the name of a database to be used for creation scripts in /docker-entrypoint-initdb.d/*.js (see Initializing a fresh instance below).
MongoDB is fundamentally designed for "create on first use", so if you do not insert data with your JavaScript files, then no database is created.


==========================================
MongoDB secrets
Secrets (MongoDB username/password) should be in place before we do any MongoDB deployment since MongoDB pods need to access the secrets. So, let's create the secrets with base64 encoded:

$ echo -n 'username' | base64
dXNlcm5hbWU=

$ echo -n 'password' | base64
cGFzc3dvcmQ=

mongodb-secret.yaml:
======================================================
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
data:
  mongo-root-username: dXNlcm5hbWU=
  mongo-root-password: cGFzc3dvcmQ=    
======================================================
$ kubectl apply -f mongodb-secret.yaml
secret/mongodb-secret created 

$ kubectl get secret
NAME                  TYPE                                  DATA   AGE
default-token-85cdq   kubernetes.io/service-account-token   3      8d
mongodb-secret        Opaque                                2      49s


=========================MongoDB deployment============================

mongodb-deployment.yaml:

MongoDB internal service
We'll append a service to the deployment:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo
        ports:
          - containerPort: 27017
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:                                        
                name: mongodb-secret
                key: mongo-root-username
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongo-root-password      
      
============================================Configmap===============================================
 
Mongo express configmap
The same with the secrets, a configmap must already be in our cluster so that our mongo-express can use it as a reference.

mongo-configmap.yaml:
============================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
data:
  database_url: mongodb-service
============================================
Note here the database_url is the same as the mongodb service name, mongodb-service


=======================================Deployment and service ==========================
mongo-express-deployment.yaml:

Mongo express external service
We'll add mongo-express service to the deployment:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express-deployment
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express
        ports:
          - containerPort: 8081
        env:
          - name: ME_CONFIG_MONGODB_ADMINUSERNAME
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongo-root-username
          - name: ME_CONFIG_MONGODB_ADMINPASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongo-root-password
          - name: ME_CONFIG_MONGODB_SERVER
            valueFrom:
              configMapKeyRef:
                name: mongodb-configmap
                key: database_url                     ###############configmap use########################

                                       
